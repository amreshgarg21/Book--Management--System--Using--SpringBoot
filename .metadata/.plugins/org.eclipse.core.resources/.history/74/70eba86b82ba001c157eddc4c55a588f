package com.api.book.bootrestbook.controllers;

import java.util.List;
import java.util.Optional;

import com.api.book.bootrestbook.entities.Book;
import com.api.book.bootrestbook.services.BookService;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RestController;

// We can use normally @Controller
// As we are working with REST APIs so we should use @RestController
// And there it is not necessary to use @ResponseBody if use @RestController

@RestController
public class BookController {

    /*
    //@RequestMapping(value="/books", method = RequestMethod.GET)
    
    @GetMapping("/books")
    public Book getBooks() {

        Book book = new Book();
        book.setId(12);
        book.setTitle("Autobiography Of Fire");
        book.setAuthor("Amresh Garg");
        return book;

        //Now our data will be sent in the JSON format by the Spring Boot. Reason because of dependency of Jackson
        
    }
    */

    // Now creating Fake Service named BookService 
    //Remember to take BookService variable name as same but in camelCase

    @Autowired
    public BookService bookService;


    //get all book handler 

    /*
    @GetMapping("/books")
    public List<Book> getBooks(){
        return this.bookService.getAllBooks();
    }
    */

    @GetMapping("/books")
    public ResponseEntity<List<Book>> getBooks(){
        List<Book> list = this.bookService.getAllBooks();
        if(list.size() <= 0){
            return ResponseEntity.status(HttpStatus.NOT_FOUND).build();
        }
        //return ResponseEntity.of(Optional.of(list)); 
        return ResponseEntity.status(HttpStatus.CREATED).body(list);
    }

    //get single book handler

    /*
    @GetMapping("/books/{id}")
    public Book getBookById(@PathVariable("id") int id){
        return this.bookService.getBookById(id);
    }
    */

    @GetMapping("/books/{id}")
    public ResponseEntity<Book> getBookById(@PathVariable("id") int id){
        Book book = this.bookService.getBookById(id);
        if (book == null){
            return ResponseEntity.status(HttpStatus.NOT_FOUND).build();
        }
        return ResponseEntity.of(Optional.of(book));
    }


    // Note that we can use the same /books url as that used in GET method. The Program will not get confused because the methods are different.
    
    //create a book handler


    /* 
    @PostMapping("/books")
    public Book addBook(@RequestBody Book book){
        Book b = this.bookService.addBook(book);
        
        // Just to ensure that it is working fine!
        System.out.println("Added successfully" + b);
        
        return b; 
    }
    */

    @PostMapping("/books")
    public ResponseEntity<Book> addBook(@RequestBody Book book){
        Book b = null;
        try{
            
            b = this.bookService.addBook(book);

            // Just to ensure that it is working fine!
            System.out.println("Added successfully" + b);
            
            return ResponseEntity.of(Optional.of(b));
        
        }

        catch(Exception e){
            e.printStackTrace();
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).build();
        }
        
        
     
    }

    //delete a book handler

/*
    @DeleteMapping("/books/{bookId}")
    public void deleteBook(@PathVariable("bookId") int bookId){
        this.bookService.deleteBook(bookId);
    }
*/

    @DeleteMapping("/books/{bookId}")
    public ResponseEntity<Void> deleteBook(@PathVariable("bookId") int bookId){
       try{
            this.bookService.deleteBook(bookId);
            return ResponseEntity.status(HttpStatus.NO_CONTENT).build();
       }
       catch(Exception e){
            e.printStackTrace();
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).build();
       }
       
    }


    //update a book handler
    //Here we need to pass two parameters, first the updated data comming in json format for which we use @RequestBody and second the id where we need to update the data with!  


    /*
    @PutMapping("/books/{id}")
    public Book updateBook(@RequestBody Book book,@PathVariable("id") int id){
        this.bookService.updateBook(book,id);
        return book; 
    }
    */

    @PutMapping("/books/{id}")
    public ResponseEntity<Book> updateBook(@RequestBody Book book,@PathVariable("id") int id){

        try{
            this.bookService.updateBook(book,id);
            return ResponseEntity.ok().body(book);
        }
        catch(Exception e){
            e.printStackTrace();
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).build();
        }

    }

}
