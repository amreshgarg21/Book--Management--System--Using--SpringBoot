package com.api.book.bootrestbook.helper;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.nio.file.StandardCopyOption;

import org.springframework.core.io.ClassPathResource;
import org.springframework.stereotype.Component;
import org.springframework.web.multipart.MultipartFile;

@Component
public class FileUploadHelper {
    
    /* public final String UPLOAD_DIR = "D:\\HandsOn_Programming_Practice\\Spring Boot In VS Code\\bootrestbook\\src\\main\\resources\\static\\image";

    public boolean uploadFile(MultipartFile multipartFile){

        boolean f = false;
        
        
        try{

            //Reading From File
            
            InputStream is = multipartFile.getInputStream();
            byte data[] = new byte[is.available()];
            is.read(data);
            
            //Writing to File (In the sense saving it in our directory)

            FileOutputStream fos = new FileOutputStream(UPLOAD_DIR+"/"+multipartFile.getOriginalFilename());
            fos.write(data);

            fos.flush();
            fos.close();

            f = true;
            
            Files.copy(multipartFile.getInputStream(), Paths.get(UPLOAD_DIR+File.separator+multipartFile.getOriginalFilename()), StandardCopyOption.REPLACE_EXISTING);

        }
        
        catch(Exception e){
            e.printStackTrace();
        }
        
        return f;

    } */

    // Now we look for deployment scenario when we need to use dynamic path
    // As we need to deploy our project so what we do is to give the dynamic path as we know that on deployment side the target folder is in use because we do not get any absolute path.

    public final String UPLOAD_DIR = new ClassPathResource("static/image/").getFile().getAbsolutePath();

    // As we use getFile() method so we need to handle the exceptions that can occur, So we initialized this constructor with throwing the IOException
    
    public FileUploadHelper() throws IOException{

    }

    public boolean uploadFile(MultipartFile multipartFile){

        boolean f = false;
        
        
        try{

            //Reading From File
            
            InputStream is = multipartFile.getInputStream();
            byte data[] = new byte[is.available()];
            is.read(data);
            
            //Writing to File (In the sense saving it in our directory)

            FileOutputStream fos = new FileOutputStream(UPLOAD_DIR+"/"+multipartFile.getOriginalFilename());
            fos.write(data);

            fos.flush();
            fos.close();

            f = true;
            
            Files.copy(multipartFile.getInputStream(), Paths.get(UPLOAD_DIR+File.separator+multipartFile.getOriginalFilename()), StandardCopyOption.REPLACE_EXISTING);

        }
        
        catch(Exception e){
            e.printStackTrace();
        }
        
        return f;
    
    }


}
